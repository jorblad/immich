apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: immich-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://immich-app.github.io/immich-charts
    chart: immich
    targetRevision: 0.10.1
    helm:
      values: |
        controllers:
          main:
            containers:
              main:
                image:
                  tag: v2.1.0
                env:
                  METRICS_ENABLED: "true"
                  IMMICH_TELEMETRY_INCLUDE: all
                  IMMICH_MACHINE_LEARNING_URL: "http://immich-app-machine-learning:3003"
                  DB_HOSTNAME:
                    valueFrom:
                      secretKeyRef:
                        name: immich-db-app
                        key: host
                  DB_USERNAME:
                    valueFrom:
                      secretKeyRef:
                        name: immich-db-app
                        key: username
                  DB_DATABASE_NAME:
                    valueFrom:
                      secretKeyRef:
                        name: immich-db-app
                        key: dbname
                  DB_PASSWORD:
                    valueFrom:
                      secretKeyRef:
                        name: immich-db-app
                        key: password
        immich:
          metrics:
            enabled: true
          persistence:
            library:
              existingClaim: immich-nfs-pvc
          configuration:
            trash:
              enabled: true
              days: 30
            storageTemplate:
              enabled: true
              template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"
        valkey:
          enabled: true
          controllers:
            main:
              containers:
                main:
                  image:
                    repository: docker.io/valkey/valkey
                    tag: 8.0-alpine
                    pullPolicy: IfNotPresent
              replicas: 2
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: redis
                        topologyKey: "kubernetes.io/hostname"

        server:
          enabled: true
          ingress:
            main:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-production
                kubernetes.io/ingress.class: traefik
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
                traefik.ingress.kubernetes.io/redirect-entry-point: websecure
                traefik.ingress.kubernetes.io/redirect-permanent: "true"
                traefik.ingress.kubernetes.io/preserve-host: "true"
                # proxy-body-size is set to 0 to remove the body limit on file uploads
                traefik.ingress.kubernetes.io/proxy-body-size: "0"
              hosts:
                - host: immich.jorblad.se
                  paths:
                    - path: "/"
                      service:
                        identifier: main
              tls:
                - secretName: immich-jorblad-se-tls
                  hosts:
                    - immich.jorblad.se
          controller:
            main:
              replicas: 1
              strategy: RollingUpdate
              resources:
                limits:
                  cpu: 1
                  memory: 1024Mi
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: server
                        topologyKey: "kubernetes.io/hostname"

          persistence:
            lightroom:
              enabled: true
              mountPath: /mnt/lightroom
              existingClaim: immich-nfs-shared-pvc

        machine-learning:
          enabled: true
          controller:
            main:
              containers:
                main:
                  image:
                    repository: ghcr.io/immich-app/immich-machine-learning
                    pullPolicy: IfNotPresent
                  env:
                    TRANSFORMERS_CACHE: /cache
              resources:
                limits:
                  cpu: 1
                  memory: 1024Mi
              replicas: 2
              strategy: RollingUpdate
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: machine-learning
                        topologyKey: "kubernetes.io/hostname"
          persistence:
            cache:
              enabled: true
              size: 10Gi
              # Optional: Set this to pvc to avoid downloading the ML models every start.
              # type: pvc   # <- removed; let the chart infer via existingClaim or use allowed type
              type: ""
              # If you want to use an existing PVC:
              # existingClaim: your-ml-cache-pvc
              # Optional fallback:
              # type: pvc
              # existingClaim: immich-ml-cache-pvc
            lightroom:
              enabled: true
              mountPath: /mnt/lightroom
              existingClaim: immich-nfs-shared-pvc

  destination:
    server: https://kubernetes.default.svc
    namespace: immich
  syncPolicy:
    # automated:
    #   prune: true
    #   selfHeal: true
