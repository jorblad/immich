apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: immich-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://immich-app.github.io/immich-charts
    chart: immich
    targetRevision: 0.9.3
    helm:
      values: |
        image:
          tag: v1.133.1
        env:
          - name: METRICS_ENABLED
            value: "true"
          - name: IMMICH_TELEMETRY_INCLUDE
            value: all
          - name: REDIS_HOSTNAME
            value: immich-app-redis-master
          - name: IMMICH_MACHINE_LEARNING_URL
            value: http://immich-app-machine-learning:3003
          - name: DB_HOSTNAME
            valueFrom:
              secretKeyRef:
                name: immich-db-app
                key: host
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: immich-db-app
                key: username
          - name: DB_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: immich-db-app
                key: dbname
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: immich-db-app
                key: password
          - name: IMMICH_TRUSTED_PROXIES
            value: 192.168.190.147
        immich:
          metrics:
            enabled: true
          persistence:
            library:
              existingClaim: immich-nfs-pvc
          configuration:
            trash:
              enabled: true
              days: 30
            storageTemplate:
              enabled: true
              template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"
        redis:
          enabled: true
          architecture: standalone
          auth:
            enabled: false
          master:
            resources:
              limits:
                cpu: 500m
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 256Mi
          replica:
            replicaCount: 2

        server:
          enabled: true
          ingress:
            main:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-production
                kubernetes.io/ingress.class: traefik
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
                traefik.ingress.kubernetes.io/redirect-entry-point: websecure
                traefik.ingress.kubernetes.io/redirect-permanent: "true"
                traefik.ingress.kubernetes.io/preserve-host: "true"
                # proxy-body-size is set to 0 to remove the body limit on file uploads
                traefik.ingress.kubernetes.io/proxy-body-size: "0"
              hosts:
                - host: immich.jorblad.se
                  paths:
                    - path: "/"
              tls:
                - secretName: immich-jorblad-se-tls
                  hosts:
                    - immich.jorblad.se
          controller:
            replicas: 2
            strategy: RollingUpdate
          persistence:
            lightroom:
              enabled: true
              type: pvc
              mountPath: /mnt/lightroom
              existingClaim: immich-nfs-shared-pvc

        machine-learning:
          enabled: true
          controller:
            replicas: 2
            strategy: RollingUpdate
          image:
            repository: ghcr.io/immich-app/immich-machine-learning
            pullPolicy: IfNotPresent
          env:
            TRANSFORMERS_CACHE: /cache
          persistence:
            cache:
              enabled: true
              size: 10Gi
              # Optional: Set this to pvc to avoid downloading the ML models every start.
              type: pvc
              accessMode: ReadWriteMany
              storageClass: longhorn
            lightroom:
              enabled: true
              type: pvc
              mountPath: /mnt/lightroom
              existingClaim: immich-nfs-shared-pvc

  destination:
    server: https://kubernetes.default.svc
    namespace: immich
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
